{"version":3,"sources":["stateless/header.js","helpers/fontDefaults.js","stateless/paragraph.js","helpers/auxiliary.js","stateless/formElement.js","stateless/button.js","helpers/axios.js","stateful/Form.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","h1Style","width","height","concat","textAlign","fontFamily","fontSize","color","boxSizing","paddingTop","margin","react_default","a","createElement","style","children","defaults","font","textColor","Paragraph","pStyle","Aux","FormElement","labelStyle","marginLeft","textAreaStyle","borderRadius","marginBottom","overflow","boxShadow","auxiliary","Object","assign","type","Button","marginTop","backgroundColor","value","onClick","instance","axios","create","baseURL","Form","state","subject","body","handleFormElementChange","event","preventDefault","currentState","objectSpread","_this","currentTarget","name","target","setState","submitForm","e","form","post","then","response","console","log","catch","error","_this2","this","onSubmit","formElement","rows","onChange","stateless_button","Component","App","className","header","paragraph","stateful_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f1f6ec5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n    const h1Style = {\r\n        width: \"100%\",\r\n        height: `${props.height}`,\r\n        textAlign: \"center\",\r\n        fontFamily: \"Open Sans\",\r\n        fontSize: \"4rem\",\r\n        color: \"white\",\r\n        boxSizing: \"border-box\",\r\n        paddingTop: \"1rem\",\r\n        margin: \"0\"\r\n    }\r\n\r\n    return  <h1 style={h1Style}>{props.children}</h1>\r\n}\r\n\r\n\r\nexport default Header","//this was made so if the default font were changed, it would be easily changed in one location.\r\nconst defaults = {\r\n        font: \"Open Sans\",\r\n        textColor: \"White\"\r\n    }\r\n\r\nexport default defaults;","import React from \"react\";\r\nimport defaults from \"../helpers/fontDefaults\"\r\n\r\nconst Paragraph = (props) => {\r\n    const pStyle = {\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        fontFamily: defaults.font,\r\n        fontSize: \"1.5rem\",\r\n        color: defaults.textColor,\r\n        boxSizing: \"border-box\",\r\n        paddingTop: \"1rem\",\r\n        margin: \"0\"\r\n    }\r\n    return <p style = {pStyle}>{props.children}</p>\r\n}\r\n\r\nexport default Paragraph;","//useful for wrapping elements, without needing a div\r\nconst Aux = (props) => {\r\n    return props.children;\r\n}\r\n\r\nexport default Aux;","import React from \"react\";\r\nimport Aux from \"../helpers/auxiliary\"\r\nimport defaults from \"../helpers/fontDefaults\"\r\n\r\nconst FormElement = (props) => {\r\n    const width = props.width;\r\n\r\n    //using width, we can set center the element using marginLeft\r\n    const labelStyle = {\r\n        marginLeft: `${(100 - width)/2}%`,\r\n        fontFamily: defaults.font,\r\n        fontSize: \"2rem\",\r\n        color: defaults.textColor\r\n    }\r\n\r\n    const textAreaStyle = {\r\n        borderRadius: \"10px\",\r\n        width: `${width}%`,\r\n        marginLeft: `${(100 - width)/2}%`,\r\n        marginBottom: \"1rem\",\r\n        fontFamily: defaults.font,\r\n        fontSize: \"3rem\",\r\n        color: \"black\",\r\n        boxSizing: \"content-box\",\r\n        overflow: \"hidden\",\r\n        boxShadow: \"1px 1px 5px black\"\r\n    }\r\n    return(\r\n        <Aux>\r\n            <label style={labelStyle}>{props.children}</label><br/>\r\n            <textarea type=\"text\" {...props} style={textAreaStyle}></textarea>\r\n        </Aux>\r\n        \r\n    );\r\n\r\n}\r\n\r\nexport default FormElement;","import React from \"react\";\r\nimport defaults from \"../helpers/fontDefaults\"\r\nimport Aux from \"../helpers/auxiliary\"\r\n//Button element accepts children, height, and width. Width in percent, height in rem\r\nconst Button = (props) => {\r\n    const width = props.width;\r\n    const height = props.height;\r\n\r\n    const style = {\r\n        width: `${width}%`,\r\n        marginLeft: `${((100-width)/2)}%`,\r\n        marginTop: \"4rem\",\r\n        marginBottom: \"6rem\",\r\n        height: `${height}rem`,\r\n        fontFamily: defaults.font,\r\n        fontSize: \"1rem\",\r\n        color: \"black\",\r\n        backgroundColor: \"#BEE9E8\",\r\n        borderRadius: \"10px\"\r\n    }\r\n    \r\n    return( \r\n        <Aux>\r\n            <input type=\"submit\" value={props.children} style={style} onClick={props.onClick}></input>\r\n        </Aux>\r\n        )\r\n}\r\n\r\nexport default Button;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://support-page-joatspace-2e8ec.firebaseio.com/\"\r\n})\r\n\r\nexport default instance;","import React, { Component } from 'react';\r\nimport FormElement from \"../stateless/formElement\"\r\nimport Button from \"../stateless/button\"\r\nimport axios from \"../helpers/axios\"\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    subject: \"\",\r\n    body: \"\",\r\n  }\r\n\r\n  //function will update state based off changes to form element\r\n  //accepts subject as a bool value to update either the subject or the body property\r\n  handleFormElementChange = (event) => {\r\n    event.preventDefault()\r\n    const currentState = {...this.state}\r\n    \r\n    if(event.currentTarget.name == \"subject\"){\r\n      currentState.subject = event.target.value;\r\n    \r\n    } else {\r\n      currentState.body = event.target.value;\r\n    \r\n    }\r\n    this.setState({...currentState})\r\n  }\r\n\r\n  submitForm = (e) => {\r\n    e.preventDefault()\r\n    const form = {\r\n      subject: this.state.subject,\r\n      body: this.state.body\r\n    } \r\n    \r\n    \r\n    axios.post('/supportForms.json', form)\r\n      .then(response => console.log(response))\r\n      .catch(error => console.log(error))\r\n  }\r\n\r\n  render() {\r\n    //set background\r\n    \r\n    //form needs 2 inputs, the subject and body. The FormElements accept 2 elements, the rows, and the width in percent\r\n    return (\r\n        <form onSubmit={this.submitForm}>\r\n        <FormElement rows=\"1\" width=\"50\" value={this.state.subject} name=\"subject\" onChange={(e) => this.handleFormElementChange(e)}>subject</FormElement>\r\n        <FormElement rows=\"7\" width=\"50\" value={this.state.body} name=\"body\" onChange={(e) => this.handleFormElementChange(e)}>body</FormElement>\r\n        \r\n        <Button width=\"10\" height=\"3.5\">Submit Issue</Button>\r\n        </form> \r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport Header from \"./stateless/header\";\nimport Paragraph from \"./stateless/paragraph\";\nimport Form from \"./stateful/Form\";\nclass App extends Component {\n  render() {\n    //set background\n    \n    return (\n      <div className=\"App\">\n        <Header>experiencing issues?</Header>\n        <Paragraph>We're sorry to hear that, <br/>please let us know about it below &darr;</Paragraph>\n        <Form></Form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}